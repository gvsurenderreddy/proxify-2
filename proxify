#!/usr/bin/env node

// console.log(process.env)

var _ = require('lodash');
var colors = require('colors');
var request = require('sync-request');
require('shelljs/global');

var argv = require('yargs')
    .usage('Usage: $0 [hostname] [listen] [target] --[options]')
    // .example('$0 count -f foo.js', 'count the lines in the given file')
    .alias('d', 'DOMAIN').describe('d', 'Domain name sub-domains built on').default('d', process.env.DOMAIN || 'local')
    .alias('i', 'SERVER').describe('i', 'IP address of the host server').default('i', process.env.SERVER || '127.0.0.1')
    .alias('c', 'CA').describe('c', 'Certificate Authority URL').default('c', process.env.CA)
    .alias('n', 'DNSIMPLE').describe('n', 'email:key').default('n', process.env.DNSIMPLE)
    .alias('s', 'ssl').describe('s', 'Create SSL host & certificate').boolean('s')
    .alias('a', 'auth').describe('a', 'Authenticate with client certificate (ssl implied)').boolean('a')
    .alias('p', 'password').describe('p', 'Authenticate with username/password (ssl implied)').boolean('p')
    .alias('r', 'redirect').describe('r', 'Redirect to target').boolean('r')
    .help('h').alias('h', 'help')
    .demand(1)
    // .wrap(100)
    .argv;

// console.log('testing')
// console.log(argv._);
// console.log(argv.r)
// console.log(argv.s)
// console.log(argv.d)

var config = {
  name: argv._[0],
  listen: (argv._[1]) ? ('' + argv._[1]) : false,
  target: (argv._[2]) ? ('' + argv._[2]) : false,
  ca: argv.c || false,
  domain: argv.d,
  server: argv.i,
  dnsimple: argv.n || false,
  ssl: argv.s || false,
  password: argv.p || false,
  auth: argv.a || false,
  redirect: argv.r || false
};

// Expand dot-ending sub-domain with domain
config.name = (_.endsWith(config.name, '.')) ? config.name + config.domain : config.name; 

// Ensure listen port doens't start with : colon
if (config.listen) {
  config.listen = (_.startsWith(config.listen, ':')) ? config.listen.split(':')[1] : config.listen;
}

if (config.target) {
  config.target = (_.endsWith(config.target, '.')) ? config.target + config.domain : config.target; 

  // Target is already URL, leave it alone
  if ((_.startsWith(config.target, 'http://')) || (_.startsWith(config.target, 'https://'))) {
    config.target = config.target; 

  // Target is URL missing http, add it
  } else if ((config.target.indexOf(":")>0) && (config.target.split(':')[0]!=='')) {
    config.target = 'http://' + config.target;

  // Target is port number, add http and server IP
  } else if (_.parseInt(config.target)>0) {
    config.target = 'http://' + config.server + ':' + _.parseInt(config.target); 

  // Target is :port number, add http and server IP
  } else if (_.parseInt(config.target.split(':')[1])>0) {
    config.target = 'http://' + config.server + ':' + _.parseInt(config.target.split(':')[1]); 
  }

// Without target, these don't work
} else {
  if (config.password || config.auth || config.redirect) {
    console.log(("Target is missing! Skipping nginx configuration.").red);
  }
  config.password = false;
  config.auth = false;
  config.redirect = false;
}

// Append request_url nginx variable to end of target
if (config.redirect) {
  if (('http://' + config.name) == config.target) config.target += '$request_uri?';
  if (('https://' + config.name) == config.target) config.target += '$request_uri?';
}

// SSL is implied when auth or password is enabled
if ((config.auth) || (config.password)) {
  config.ssl = true
}

// If SSL is enabled, ensure Certificate Authority is available
if (config.ssl) {
  try { request('GET', config.ca); } 
  catch (e) { 
    var msg = (config.ca) ? "not responding (" + config.ca + ")!" : "missing!";
    console.log(("Certificate Authority is " + msg + " Skipping SSL options.").red);
    config.ca = false;
    config.ssl = false;
    config.password = false;
    config.auth = false;
  }
}


console.log(config)
